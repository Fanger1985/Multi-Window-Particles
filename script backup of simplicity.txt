// Scene setup
const scene = new THREE.Scene();

// Camera setup
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 5, 0); // Camera is above looking down at the scene
camera.lookAt(new THREE.Vector3(0, 0, 0)); // Look at the center of the scene

// Renderer setup
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Texture Loader
const textureLoader = new THREE.TextureLoader();

// Load the circle texture
const circleTexture = textureLoader.load('https://threejs.org/examples/textures/sprites/circle.png');

// Particles setup
const particlesGeometry = new THREE.BufferGeometry();
const particlesCnt = 5000; // Adjusted for performance
const posArray = new Float32Array(particlesCnt * 3); // Multiply by 3 for x,y,z coordinates
const velocityArray = new Float32Array(particlesCnt); // Just need one component for Y velocity

for (let i = 0; i < particlesCnt * 3; i++) {
    posArray[i] = (Math.random() - 0.5) * 5;
}

particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
particlesGeometry.setAttribute('velocity', new THREE.BufferAttribute(velocityArray, 1));

// Materials setup
const particlesMaterial = new THREE.PointsMaterial({
    size: 0.015,
    map: circleTexture,
    transparent: true,
    blending: THREE.AdditiveBlending
});

// Mesh
const particleMesh = new THREE.Points(particlesGeometry, particlesMaterial);
scene.add(particleMesh);

// Responsive canvas
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// Instantiate the SimplexNoise
const simplex = new SimplexNoise();

// Animation constants
const gravity = -0.00005; // Gravity pulling down the particles

// Regenerate particle at a new position
function regenerateParticle(i, positions, velocities) {
    positions[i] = (Math.random() - 0.5) * 5; // x position
    positions[i + 1] = 2.5; // y position (reset to middle)
    positions[i + 2] = (Math.random() - 0.5) * 5; // z position
    velocities[i / 3] = 0; // reset velocity
}

// Handle particle exit
function handleParticleExit(i, positions, velocities) {
    const edge = calculateExitEdge(positions[i], positions[i + 1], positions[i + 2]);
    if (edge) {
        const particleData = {
            position: [positions[i], positions[i + 1], positions[i + 2]],
            velocity: velocities[i / 3],
            edge: edge
        };
        const key = 'particleExit-' + Date.now();
        localStorage.setItem(key, JSON.stringify(particleData));
        regenerateParticle(i, positions, velocities);
    }
}

// Calculate the exit edge for a particle
function calculateExitEdge(x, y, z) {
    if (x < -2.5) return 'left';
    if (x > 2.5) return 'right';
    if (y < -2.5) return 'bottom';
    if (y > 2.5) return 'top';
    if (z < -2.5) return 'front';
    if (z > 2.5) return 'back';
    return null;
}

// Import particle from local storage
function importParticle(particleData) {
    const position = calculateImportPosition(particleData.edge);
    addParticle(position, particleData.velocity);
}

// Calculate the import position based on the edge
function calculateImportPosition(edge) {
    // Placeholder logic, replace with your own
    switch (edge) {
        case 'left': return [2.5, Math.random() * 5 - 2.5, Math.random() * 5 - 2.5];
        case 'right': return [-2.5, Math.random() * 5 - 2.5, Math.random() * 5 - 2.5];
        case 'top': return [Math.random() * 5 - 2.5, -2.5, Math.random() * 5 - 2.5];
        case 'bottom': return [Math.random() * 5 - 2.5, 2.5, Math.random() * 5 - 2.5];
        // Add cases for 'front' and 'back' if needed
    }
}

// Add particle to the scene
function addParticle(position, velocity) {
    // Placeholder logic, replace with your own system to add particles
    console.log(`Adding particle at ${position} with velocity ${velocity}`);
}

// Animation loop
function animate() {
    requestAnimationFrame(animate);
    const positions = particleMesh.geometry.attributes.position.array;
    const velocities = particleMesh.geometry.attributes.velocity.array;
    const time = performance.now() * 0.0002;

    for (let i = 0; i < positions.length; i += 3) {
        const indexY = i / 3;
        const noise = simplex.noise3D(positions[i], positions[i + 1], time) * 0.1;
        velocities[indexY] += gravity;
        positions[i] += noise;
        positions[i + 1] += velocities[indexY];
        positions[i + 2] += noise;

        if (positions[i + 1] < -2.5 || positions[i + 1] > 2.5 || positions[i] < -2.5 || positions[i] > 2.5 || positions[i + 2] < -2.5 || positions[i + 2] > 2.5) {
            handleParticleExit(i, positions, velocities);
        }
    }

    particleMesh.geometry.attributes.position.needsUpdate = true;
    particleMesh.geometry.attributes.velocity.needsUpdate = true;

    renderer.render(scene, camera);
}

// Start the animation loop
animate();

// Listen for local storage events to import particles
window.addEventListener('storage', (event) => {
    if (event.key.startsWith('particleExit')) {
        const particleData = JSON.parse(event.newValue);
        importParticle(particleData);
        localStorage.removeItem(event.key); // Cleanup
    }
});
